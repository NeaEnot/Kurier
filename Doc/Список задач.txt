=== ОБЩАЯ ФОРМУЛИРОВКА ПРОЕКТА ===
Общение микросервисов с использованием Kafka (передача и публикация)
Использование Redis для хранения кэшей
Применение паттернов API Gateway и Circuit Breaker
Развернуть каждый микросервис в отдельном контейнере используя оркестратор



=== ЗАДАЧИ ===
Возможно стоит разнести модели по сервисам
Добавить логирование
Возможность запустить дублирующие сервисы
Разобраться с неймингом и неймспейсами моделей / Разделить модели на те, что идут от api, и на те, что идут в базу/на другой сервис
Резервное копирование баз данных
Seed data для постгреса



=== СДЕЛАНО ===
Основное хранилище в БД
OrderService
API Gateway
Storage, основанный на Redis
Настроить пропброс свагера через ocelot
Сервис доставки
Circuit Breaker для API Gateway
ClientService, заглушки
Сервис курьеров, заглушки
Вынести работу с Kafka в Common
Отмена заказа
Вынес названия топиков в константы
Вынес настройки kafka и redis в конфиг
Интерфейс IClientStorage
Заглушки под использование токена
Хранилище токенов в Redis
Подумать как связать заказ с сервисом клиентов
Убрать нахер try/catch'и из методов авторизации и возвращать exception
Middleware с заглушкой для авторизации через ApiGateway
Единый сервис пользователей
Флаги разрешений
Атрибут авторизации и разрешений
Защита UsersController.GetUserInfo с помощью ключа
Добавлено хранилище для уведомлений в Redis
Убрано чтение топика на отмену заказа везде кроме DeliveryService
Интерфейс хранилища для DeliveryService
Реализация RedisDeliveryStorage
Небольшие доработки для DeliveryService