version: '3.4'

networks:
  apinet:
    driver: bridge
    name: apinet

services:
  deliveryservice:
    image: ${DOCKER_REGISTRY-}deliveryservice
    build:
      context: .
      dockerfile: DeliveryService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8030
      - ASPNETCORE_HTTPS_PORTS=8031
      - REDIS_HOST=redis
      - REDIS_POR=6379
    ports:
      - "8030:8030"
      - "8031:8031"
    networks:
      - apinet
    depends_on:
     - redis
     - kafka
     - postgres.db

  orderservice:
    image: ${DOCKER_REGISTRY-}orderservice
    build:
      context: .
      dockerfile: OrderService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8020
      - ASPNETCORE_HTTPS_PORTS=8021
    ports:
      - "8020:8020"
      - "8021:8021"
    networks:
      - apinet
    depends_on:
     - redis
     - kafka
     - postgres.db

  userservice:
    image: ${DOCKER_REGISTRY-}userservice
    build:
      context: .
      dockerfile: UserService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8010
      - ASPNETCORE_HTTPS_PORTS=8011
    ports:
      - "8010:8010"
      - "8011:8011"
    networks:
      - apinet
    depends_on:
     - redis
     - kafka
     - postgres.db

  api:
    image: ${DOCKER_REGISTRY-}api
    build:
      context: .
      dockerfile: Api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
      - ASPNETCORE_HTTPS_PORTS=8081
    ports:
      - "8080:8080"
      - "8081:8081"
    networks:
      - apinet
    depends_on:
     - postgres.db
     - redis
     - kafka
 
  postgres.db:
   container_name: postgres.db
   image: postgres:12.9
   environment:
     POSTGRES_DB: "postgres_db"
     POSTGRES_USER: "db_admin"
     POSTGRES_PASSWORD: "12345"
   ports:
     - "5432:5432"
   networks:
      - apinet
   volumes:
     - ./pgdata:/var/lib/postgresql/data 

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"
    networks:
      - apinet

  # kafka:
  #   image: wurstmeister/kafka:latest
  #   networks:
  #       - apinet
  #   ports:
  #     - "9094:9094"
  #   environment:
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_LISTENERS: INTERNAL://0.0.0.0:9094,OUTSIDE://0.0.0.0:9092
  #     KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9094,OUTSIDE://localhost:9092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    networks:
      - apinet
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  redis:
    image: redis:latest
    container_name: redis_container
    restart: always
    ports:
      - "6379:6379"
    networks:
      - apinet
    command: ["redis-server", "--save 20 1", "--loglevel debug"]
    volumes:
      - ./data/redis:/data
